-- sql asissment(joining of tables)
-- Write SQL query to solve the problem given below
-- Consider three table named as city, customer and country 

-- CITY TABLE
CREATE TABLE CITY(
ID INT PRIMARY KEY,
CITY_NAME VARCHAR(50) NOT NULL,
LAT FLOAT NOT NULL,
LONG_VALUE FLOAT NOT NULL,
COUNTRY_ID INT NOT NULL,
FOREIGN KEY CITY(COUNTRY_ID) REFERENCES COUNTRY(ID)
);

INSERT INTO CITY VALUES(1,'BERLIN',52.520008,13.404954,1);
INSERT INTO CITY VALUES(2,'BELGRADE',44.787197,20.457273,2);
INSERT INTO CITY VALUES(3,'ZAGREB',45.815399,15.966568,3);
INSERT INTO CITY VALUES(4,'NEW YORK',40.730610,-73.935242,4);
INSERT INTO CITY VALUES(5,'LOS ANGELES',34.052235,-118.243683,4);
INSERT INTO CITY VALUES(6,'WARSAW',52.237049,21.017532,5);

DROP TABLE CITY;

SELECT * FROM CITY;

-- CUSTOMER TABLE
CREATE TABLE CUSTOMER_a(
ID INT PRIMARY KEY,
CUSTOMER_NAME VARCHAR(50) NOT NULL,
CITY_ID INT NOT NULL,
CUSTOMER_ADDRESS VARCHAR(50) NOT NULL,
NEXT_CALL_DATE DATE NOT NULL,
TS_INSERTED VARCHAR(60) NOT NULL,
FOREIGN KEY CUSTOMER_a(CITY_ID) REFERENCES CITY(ID)
);

DROP TABLE CUSTOMER_A;
TRUNCATE CUSTOMER_A;

INSERT INTO CUSTOMER_A VALUES(1,'JEWELRY STORE', 4,'LONG STREET 120','2020-01-21','2020-01-09 14:01:20.000');
INSERT INTO CUSTOMER_A VALUES(2,'BAKERY', 1,'KURFURSTENDAMM 25','2020-02-21','2020-01-09 17:52:15.000');
INSERT INTO CUSTOMER_A VALUES(3,'CAFE', 1,'TAUENTZIENSTRABE 44','2020-01-21','2020-01-10 08:02:49.000');
INSERT INTO CUSTOMER_A VALUES(4,'RESTAURANT', 3,'ULICA LIPA 15','2020-01-21','2020-01-10 09:20:21.000');

-- COUNTRY

CREATE TABLE COUNTRY(
ID INT PRIMARY KEY,
COUNTRY_NAME VARCHAR(50) NOT NULL,
COUNTRY_NAME_ENG VARCHAR(30) NOT NULL,
COUNTRY_CODE VARCHAR(10) NOT NULL
);

DROP TABLE COUNTRY;
TRUNCATE COUNTRY;

INSERT INTO COUNTRY VALUES(1,'DEUTSCHLAND','GERMANY','DEU');
INSERT INTO COUNTRY VALUES(2,'SRBIJA','SERBIA','SRB');
INSERT INTO COUNTRY VALUES(3,'HRVATSKA','CROATIA','HRV');
INSERT INTO COUNTRY VALUES(4,'UNITED STATES OF AMERICA','UNITED STATES OF AMERICA','USA');
INSERT INTO COUNTRY VALUES(5,'POLSKA','POLAND','POL');
INSERT INTO COUNTRY VALUES(6,'ESPANA','SPAIN','ESP');
INSERT INTO COUNTRY VALUES(7,'ROSSIYA','RUSSIA','RUS');

SELECT * FROM CITY;
SELECT * FROM CUSTOMER_A;
SELECT * FROM COUNTRY;

-- While each city has a related country, not all countries have related cities (Spain & 
-- Russia don’t have them)

-- ● Same stands for the customers. Each customer has the city_id value defined, but only 
-- 3 cities are being used (Berlin, Zagreb & New York)
-- Now commute the following tasks : 
-- Task : 1 (join multiple tables using left join)
-- List all Countries and customers related to these countries.
-- For each country displaying its name in English, the name of the city customer is located in as 
-- well as the name of the customer. 
-- Return even countries without related cities and customers
SELECT CITY.ID,CUSTOMER_A.CUSTOMER_NAME,CUSTOMER_A.CUSTOMER_ADDRESS, COUNTRY.COUNTRY_NAME,COUNTRY.COUNTRY_NAME_ENG
FROM CITY
LEFT JOIN CUSTOMER_A ON CITY.ID = CUSTOMER_A.CITY_ID
LEFT JOIN COUNTRY ON CITY.COUNTRY_ID = COUNTRY.ID;


-- Task : 2 (join multiple tables using both left and inner join)
-- Return the list of all countries that have pairs(exclude countries which are not referenced by any 
-- city). For such pairs return all customers.
-- Return even pairs of not having a single customer
SELECT CITY.ID,CUSTOMER_A.CUSTOMER_NAME,COUNTRY.COUNTRY_NAME,COUNTRY.COUNTRY_NAME_ENG,COUNTRY.COUNTRY_CODE
FROM CITY
INNER JOIN COUNTRY ON CITY.COUNTRY_ID=COUNTRY.ID
LEFT JOIN CUSTOMER_A ON CUSTOMER_A.CITY_ID = CITY.ID;

COMMIT;


















